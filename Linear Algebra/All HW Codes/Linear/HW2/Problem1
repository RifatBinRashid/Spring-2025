#Taking the input matrix(A)
N = int(input("Enter the size of the square matrix A (N x N): "))

A = []

for i in range(N):
        # Get the row input as a string
        row_input = input(f"Enter row {i+1} (separate elements by spaces): ")
        
        # Split the input string into individual elements and convert them to integers
        row = list(map(int, row_input.split()))
        
        # Append the row to the matrix
        A.append(row)

print("The matrix you entered (A) is:")
for row in A:
    print(row)

#LU_decomposition function
def lu_decomposition(matrix):
    rows = len(matrix)
    cols = len(matrix[0])
    
    # Initialize L as an identity matrix
    L = [[1.0 if i == j else 0.0 for j in range(rows)] for i in range(rows)]
    
    # Initialize U as a copy of the input matrix
    U = matrix
    
    # Perform Gaussian elimination to get U (upper triangular) and L (lower triangular)
    for i in range(rows):
        pv = U[i][i]  # Pivot element
        for k in range(i + 1, rows):
            mul = U[k][i] / pv  # Multiplier for elimination
            L[k][i] = mul  # Store the multiplier in L
            for j in range(cols):
                U[k][j] = U[k][j] - (mul * U[i][j])  # Update U
    
    return L, U

L, U = lu_decomposition(A)

# Print the results
print("\nL (Lower Triangular Matrix):")
for row in L:
    print(row)

print("\nU (Upper Triangular Matrix):")
for row in U:
    print(row)

# Verify the decomposition by multiplying L and U
def matrix_multiply(L, U):
    result = [[0.0] * N for _ in range(N)]
    for i in range(N):
        for j in range(N):
            for k in range(N):
                result[i][j] += L[i][k] * U[k][j]
    return result

# Reconstruct the original matrix
A_reconstructed = matrix_multiply(L, U)

print("\nReconstructed A (L * U):")
for row in A_reconstructed:
    print(row)