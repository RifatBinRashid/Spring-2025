# Test cases
Ns = [3, 4, 5, 10, 20]

def create_matrix_b(N):
    B = [[ 0.0 for j in range(N)] for i in range(N)]
    for i in range (N):
        for j in range (N):
            B[i][j] = 1 / ((i + 1) + (j + 1) + 1)
    return B

def lu_decomposition(matrix):
    rows = len(matrix)
    cols = len(matrix[0])
    
    # Initialize L as an identity matrix
    L = [[1.0 if i == j else 0.0 for j in range(rows)] for i in range(rows)]
    
    # Initialize U as a copy of the input matrix
    U = matrix
    
    # Perform Gaussian elimination to get U (upper triangular) and L (lower triangular)
    for i in range(rows):
        pv = U[i][i]  # Pivot element
        for k in range(i + 1, rows):
            mul = U[k][i] / pv  # Multiplier for elimination
            L[k][i] = mul  # Store the multiplier in L
            for j in range(cols):
                U[k][j] = U[k][j] - (mul * U[i][j])  # Update U
    
    return L, U

def determinant(matrix):
    #Compute the determinant of a square matrix using LU decomposition.
    # Initialize an determinant with one
    det=1
    _, U = lu_decomposition(matrix)
    for i in range(len(U)):
        det= det*U[i][i]

    return det

for N in Ns:
    print(f"\nResult for N = {N}:")
    B = create_matrix_b(N)
    if N == 10:  # Display the full matrix only for N = 10
        print("Matrix B for N = 10:")
        for row in B:
            print([f"{val:.4f}" for val in row])
    L, U = lu_decomposition(B)
    print(f"Determinant for N = {N}:")
    det = determinant(B)
    print(det)
    print("-" * 30) 
    
